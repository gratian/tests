This folder contains various data capture/histogram screenshots.

Kernels under test:
  * 3.2.35-rt52 #10 SMP PREEMPT RT
  * 3.14.25-rt22 #12 SMP PREEMPT RT

Hardware:
  admin@antacid:~# cat /proc/cpuinfo 
  processor	: 0
  model name	: ARMv7 Processor rev 0 (v7l)
  Features	: swp half thumb fastmult vfp edsp neon vfpv3 tls vfpd32 
  CPU implementer	: 0x41
  CPU architecture: 7
  CPU variant	: 0x3
  CPU part	: 0xc09
  CPU revision	: 0

  processor	: 1
  model name	: ARMv7 Processor rev 0 (v7l)
  Features	: swp half thumb fastmult vfp edsp neon vfpv3 tls vfpd32 
  CPU implementer	: 0x41
  CPU architecture: 7
  CPU variant	: 0x3
  CPU part	: 0xc09
  CPU revision	: 0

  Hardware	: NI Zynq-based Target
  Revision	: 0000
  Serial	: 0000000000000000


Description:

  * cycle_count_histogram.png - histogram of hrtimer_interrupt execution
  measured using the ARM cycle count PMU register. Depicted in white are the
  3.14 numbers versus 3.2 numbers in red. To obtain the true cycle count the
  numbers in the screenshot have to be multiplied by 2 (artifact of the way the
  data was captured).

  * cycle_count_histogram_zoom.png - same data as "cycle_count_historam.png"
  described above with the graph zoomed in on the tail end of the histogram.

  * hrtimer_callback.png - cycle count histogram of callbacks invoked from
  hrtimer_interrupt() via __run_hrtimer()->fn(timer). 3.14-rt numbers are
  plotted in white versus 3.2-rt in red.

  * hrtimer_callback_zoom.png - same histogram as above (hrtimer_callback.png)
  zoomed in on the tail end of the histogram.

  * hrtimer_remove.png - cycle count histogram for __remove_hrtimer(). This was
  initially suspected for the slowdown due to the number of changes in the
  associated red-black tree manipulation code. While the 3.14 histogram doesn't
  show a very well defined peak like the 3.2 data the maximum is below the 3.2
  numbers.

Observations:
  * The numbers were acquired while running a timer stress test with 1000
  threads running clock_nanosleep() loops with random wait times of up to 1ms.

  * The hrtimer_interrupt() longest execution path in 3.14 is:
  (29142-25008)*2 = 8268 cpu cycles longer when compared to 3.2.

  * The slowdown appears to be caused by one of the callbacks invoked from
  hrtimer_interrupt() in irq context.

  * After further profiling the main culprit appears to be the
  tick_sched_timer() callback.
